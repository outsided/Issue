generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now()) @map("created_at")
  updateAt         DateTime           @updatedAt @map("update_at")
  email            String             @unique
  name             String?
  password         String
  workInterval     Int?               @default(50) @map("work_interval")
  breakInterval    Int?               @default(10) @map("break_interval")
  intervalsCount   Int?               @default(7) @map("intervals_count")
  pomadoroSessions PomadoroSessions[]
  tasks            Task[]
  timeblock        TimeBlock[]

  @@map("user")
}

model Task {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updateAt    DateTime  @updatedAt @map("update_at")
  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])

  @@map("task")
}

model TimeBlock {

  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("update_at")
  name      String
  color     String?
  duration  Int
  order     Int      @default(1)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("time_block")
}

model PomadoroSessions {

  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now()) @map("created_at")
  updateAt      DateTime        @updatedAt @map("update_at")
  isCompleted   Boolean?        @default(false) @map("is_completed")
  userId        String          @map("user_id")

  pomadoroRound PomadoroRound[]
  
  user          User            @relation(fields: [userId], references: [id])

  @@map("pomadoro_sessions")
}

model PomadoroRound {
  id                 String           @id @default(cuid())
  createdAt          DateTime         @default(now()) @map("created_at")
  updateAt           DateTime         @updatedAt @map("update_at")
  totalSeconds       Int @map("total_seconds")
  isCompleted        Boolean?         @default(false) @map("is_completed")
  pomadoroSessionsId String           @map("pomadoro_sessions_id")
  pomadoroSessions   PomadoroSessions @relation(fields: [pomadoroSessionsId], references: [id], onDelete: Cascade)

  @@map("pomadoro_round")
}

enum Priority {
  low
  medium
  high
}
